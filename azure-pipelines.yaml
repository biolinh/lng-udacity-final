name: Azure Pipelines

trigger:
- main

variables:
  python.version: '3.7.6'
  terraformVersion: '1.3.4'
  azureServiceConnectionId: 'DevOps'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  poolName: 'LinuxAgent'
  appName: 'lng-udacity-final-AppService'
    # Log agent
  AZURE_LOG_ANALYTICS_ID: "c468f5f9-7e81-44c5-a9e3-856bf80ca2a3"
  AZURE_LOG_ANALYTICS_PRIMARY_KEY: "dH+FFqK1x/RiG5NKs2HU/UidqdNF9ahJLCj08zQGyqBdqdiFbts2JNTc1YcDumMMtm5/ckJo5ATjhBuJLkoSzA=="

pool: 
  name: '$(poolName)'

stages:
#--------------------------------------------#  
# BUILD
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructureWithTerraform
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    # Run Terraform Init on the pipeline agent 
    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate226218614'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
   
    - task: TerraformCLI@0
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#    
      # Postman - Install Newman    
      # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: "sudo npm install -g newman"
        workingDirectory: $(System.DefaultWorkingDirectory)   
    # Postman Data Validation Test Suite
    # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: newman run ValidationTest.json  --reporters cli,junit --reporter-junit-export results\validation-data-test.xml
        workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
    # Postman Regression Test Suite
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: newman run RegressionTest.json  --reporters cli,junit --reporter-junit-export results\regression-test.xml
        workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
    # Postman - Publish Results
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: "**/TEST-*.xml"
        searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman/"
        mergeTestResults: true
        testRunTitle: "Run regression and validation test"
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive selenium tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload selenium tests'
      artifact: drop-ui-tests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI code'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #FakeRestAPI - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI code'
      artifact: drop-fakerestapi

    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    - task: ArchiveFiles@2
      displayName: "Archive PerformanceTestSuite"
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter
        includeRootFolder: false
        archiveType: "zip"
        archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetestsuit.zip"
    # JMeter Test Suite - Publish
    - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetestsuit.zip"
      displayName: "publish performancetestsuit"
      artifact: drop-performancetestsuit
    
#--------------------------------------------#  
# DEPLOYMENT
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: DeployAppService
    pool: 
      name: '$(poolName)'
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(appName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip 

          #--------------------------------------------#
          # Run JMeter test suite against the App Service
          # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.
          # ToDo: Generate the log file.
          - task: CmdLine@2
            displayName: "Install JMeter"
            inputs:
              workingDirectory: $(Pipeline.Workspace)/drop-performancetestsuit
              script: |
                sudo apt-get install openjdk-11-jre-headless -y
                wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
                tar xzvf jmeter.tgz
                sudo apt-get install unzip
                sudo apt install jmeter
                unzip -o "$(Build.BuildId)-performancetestsuit.zip"
                mkdir -p jmeterlog
                pwd
                ls -la 
          - task: CmdLine@2
            displayName: "Run Endurance Test"
            inputs:
              workingDirectory: $(Pipeline.Workspace)/drop-performancetestsuit
              script: jmeter -n -t EnduranceTest.jmx -l jmeterlog/endurance_test_result.csv -j jmeterlog/endurance-test-html-report
          - task: CmdLine@2
            displayName: "Run Stress Test"
            inputs:
              workingDirectory: $(Pipeline.Workspace)/drop-performancetestsuit
              ## clear test to run next time
              script: |
                jmeter -n -t StressTest.jmx -l jmeterlog/stress_test_result.csv -j jmeterlog/stress-test-html-report
                          
  #--------------------------------------------#  
 # Selenium | Functional UI Tests
 # ToDo: 
  - deployment: DeployVM
    displayName: Deploy VM and execute Selenium tests
    workspace:
      clean: all
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'drop-ui-tests'    
          - task: Bash@3
            displayName: 'Deploy VM'
            inputs:
              targetType: 'inline'
              script: |           
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                chromium-browser -version
                sudo apt-get install -y chromium-chromedriver
                chromedriver --version
                pip3 install -U selenium
              workingDirectory: $(System.DefaultWorkingDirectory)
          - download: current
            displayName: 'Download selenium tests'
            artifact: drop-ui-tests
          - task: Bash@3
            displayName: 'Execute selenium tests'
            inputs:
              targetType: 'inline'
              script: |            
                unzip -o $(Pipeline.Workspace)/drop-ui-tests/$(Build.BuildId)-ui-tests.zip -d .
                python3 login.py > ui-logs$(Build.BuildId).log
                sudo mkdir /var/logs
                sudo mkdir /var/logs/selenium
                sudo cp ui-logs$(Build.BuildId).log /var/logs/selenium
                echo '------------> Copy log files to folder log successfully'
                sudo ls /var/logs/selenium
              workingDirectory: $(System.DefaultWorkingDirectory)
          - task: PublishPipelineArtifact@1
            displayName: Publish selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/ui-logs$(Build.BuildId).log'
              artifactName: 'drop-selenium-logs'